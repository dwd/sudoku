name: Deploy

on:
  push:
    branches: ['master']

env:
  TF_LOG: INFO
  TF_INPUT: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    defaults:
      run:
        shell: bash
    env:
      NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          registry-url: "https://npm.pkg.github.com"
          scope: "@dwd"
      - uses: hashicorp/setup-terraform@v2
      - uses: dwd/secrets-vault@master
        with:
          VAULT_KEY: ${{ secrets.VAULT_KEY }}
          environment: deploy
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform
      - name: Terraform Format Check
        run: terraform fmt -check
        working-directory: ./terraform
      - run: npm ci
      - run: npm run build
      - run: npm run build-storybook
      - name: Gather deployment files
        run: echo main_files = '[ '$(find . -type f -printf '"%p",')' ]' > ../terraform/vars.tfvars
        working-directory: dist/
      - name: Gather deployment files
        run: echo sb_files = '[ '$(find . -type f -printf '"%p",')' ]' >> ../terraform/vars.tfvars
        working-directory: storybook-static/
      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform
      - name: Terraform Plan
        run: terraform plan -no-color -var-file=vars.tfvars
        working-directory: ./terraform
      - name: Deploy it
        run: terraform apply -var-file=vars.tfvars -auto-approve
        working-directory: ./terraform
        env:
          GANDIV5_API_KEY: ${{ env.GANDI_API_KEY }}

